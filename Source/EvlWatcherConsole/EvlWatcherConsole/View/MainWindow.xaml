<Window x:Class="EvlWatcherConsole.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:EvlWatcherConsole.ViewModel"
        Title="EvlWatcher v2.0 Console" Height="650" Width="825" MinHeight="650" MinWidth="825" Icon="pack://application:,,,/Resources/EvlWatcher.ico" WindowStyle="ThreeDBorderWindow">
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="265*"/>
            <ColumnDefinition Width="452*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="40"></RowDefinition>
        </Grid.RowDefinitions>
        <TabControl Grid.ColumnSpan="2">
            <TabItem Header="Currently Banned" IsSelected="{Binding IsIPTabSelected, Mode=OneWayToSource}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid Margin="5,5,5,5" Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="30"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Label Grid.ColumnSpan="2">temporarily banned IPs:</Label>
                        <ListView Grid.Row="1" SelectedItem="{Binding SelectedTemporaryIP}" IsEnabled="{Binding IsServiceResponding}" ItemsSource="{Binding TemporarilyBannedIPs}" Grid.ColumnSpan="2">
                            <ListBox.Background>
                                <ImageBrush ImageSource="pack://application:,,,/Resources/Dtjohnnymonkey-Stopwatch-no-shading.png" TileMode="None" Opacity="0.25"/>
                            </ListBox.Background>
                        </ListView>
                        <Grid Grid.Row="2" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="1" Margin="5,5,5,5" Command="{Binding RemoveTemporaryBanCommand}" IsEnabled="{Binding IsServiceResponding}" ToolTip="Remove the selected IP from the temporary ban list">
                                <Image Source="pack://application:,,,/Resources/close_32.ico"></Image>
                            </Button>
                            <Button Grid.Column="2" Command="{Binding MoveTemporaryToPermaCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Move to permanent ban list">
                                <Image Source="pack://application:,,,/Resources/lock_32.ico"></Image>
                            </Button>
                            <Button Grid.Column="3" Command="{Binding MoveTemporaryToWhiteListCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Whitelist this IP">
                                <Image Source="pack://application:,,,/Resources/lock_open_32.ico"></Image>
                            </Button>
                        </Grid>
                    </Grid>
                    <Grid Margin="5,5,5,5" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="30"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Label>permanently banned IPs:</Label>
                        <ListView Grid.Row="1" SelectedItem="{Binding SelectedPermanentIP}" IsEnabled="{Binding IsServiceResponding}" ItemsSource="{Binding PermanentlyBannedIPs}">
                            <ListBox.Background>
                                <ImageBrush ImageSource="pack://application:,,,/Resources/149667-3f51b5.png" TileMode="None" Opacity="0.25"/>
                            </ListBox.Background>
                        </ListView>
                        <Grid Grid.Row="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <TextBox Text="{Binding PermaBanIPString, UpdateSourceTrigger=PropertyChanged}" Margin="5,5,5,5"></TextBox>
                            <Button Grid.Column="1" Command="{Binding AddPermaBanCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Add to permanent ban list">
                                <Image Source="pack://application:,,,/Resources/add_32.ico"></Image>
                            </Button>
                            <Button Grid.Column="2" Command="{Binding RemovePermaBanCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Remove from permanent ban list">
                                <Image Source="pack://application:,,,/Resources/close_32.ico"></Image>
                            </Button>
                        </Grid>
                    </Grid>
                    <Grid Margin="5,5,5,5" Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="30"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Label>white-listed IP Patterns:</Label>
                        <ListView FontWeight="DemiBold" Grid.Row="1" SelectedItem="{Binding SelectedWhiteListPattern}" IsEnabled="{Binding IsServiceResponding}" ItemsSource="{Binding WhiteListedPatterns}">
                            <ListBox.Background>
                                <ImageBrush ImageSource="pack://application:,,,/Resources/49090725942_794806e948_b.jpg" TileMode="None" Opacity="0.25"/>
                            </ListBox.Background>

                        </ListView>
                        <Grid Grid.Row="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <TextBox Text="{Binding WhiteListFilter, UpdateSourceTrigger=PropertyChanged}" Margin="5,5,5,5"></TextBox>
                            <Button Grid.Column="1" Command="{Binding AddWhiteListFilterCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Add to whitelist">
                                <Image Source="pack://application:,,,/Resources/add_32.ico"></Image>
                            </Button>
                            <Button Grid.Column="2" Command="{Binding RemoveWhiteListFilterCommand}" Margin="5,5,5,5" Grid.Row="2" IsEnabled="{Binding IsServiceResponding}" ToolTip="Remove from whitelist">
                                <Image Source="pack://application:,,,/Resources/close_32.ico"></Image>
                            </Button>
                        </Grid>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Live" IsSelected="{Binding IsConsoleTabSelected, Mode=OneWayToSource}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25*"/>
                        <ColumnDefinition Width="687*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="40"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Grid.ColumnSpan="2">Showing recent console output of the service:</Label>
                    <TextBox Name="ConsoleTextbox" Grid.Row="1" Background="Black" Foreground="Green" FontFamily="Courier" IsReadOnly="True" Text="{Binding ConsoleText}" Grid.ColumnSpan="2" TextChanged="ConsoleTextBox_TextChanged" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" 
                             AcceptsReturn="True">

                    </TextBox>
                    <StackPanel  Grid.Row="2" Orientation="Horizontal" Grid.ColumnSpan="2">
                        <Label VerticalAlignment="Center">Console verbosity:</Label>
                        <ComboBox x:Name="ComboVerbosity" VerticalAlignment="Center" Width="100" Margin="5" Text="Verbosity" ItemsSource="{Binding AvailableLogLevels}" SelectedValue="{Binding SelectedConsoleLevel}" IsEnabled="True">
                        </ComboBox>
                        <CheckBox VerticalAlignment="Center" Name="AutoscrollCheckBox" Content="Autoscroll" IsChecked="True"></CheckBox>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Global Settings" IsSelected="{Binding IsGlobalConfigSelected, Mode=OneWayToSource}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition></RowDefinition>
                        <RowDefinition Height="40"></RowDefinition>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <Label VerticalAlignment="Center">LogLevel:</Label>
                            <ComboBox Margin="5" Width="100" ItemsSource="{Binding AvailableLogLevels}" IsEnabled="{Binding IsInGlobalEditMode}" SelectedItem="{Binding LogLevel}"></ComboBox>
                            <Label VerticalAlignment="Center" Foreground="Gray">Messages from EvlWatcher greater or equal this level will be written to the Windows-Eventlog</Label>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label VerticalAlignment="Center">Console Backlog:</Label>
                            <TextBox Margin="5" Width="60" Text="{Binding ConsoleBackLog}" IsEnabled="{Binding IsInGlobalEditMode}"></TextBox>
                            <Label>entries</Label>
                            <Label VerticalAlignment="Center" Foreground="Gray">Basically, how far you can scroll up in the "Live" tab.</Label>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label VerticalAlignment="Center">Check interval:</Label>
                            <TextBox Margin="5" Width="60" Text="{Binding CheckInterval}"  IsEnabled="{Binding IsInGlobalEditMode}"></TextBox>
                            <Label>s</Label>
                            <Label VerticalAlignment="Center"  Foreground="Gray">How often the Eventlog will be checked.</Label>
                        </StackPanel>
                        
                    </StackPanel>
                    <StackPanel Grid.Row="1" Orientation="Horizontal" FlowDirection="RightToLeft">
                        <Button Margin="5" Padding="2" Content="Save" Command="{Binding SaveGlobalConfigCommand}" ToolTip="Apply to EvlWatcher">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Margin="5" Padding="2" Content="Cancel" Command="{Binding CancelGlobalEditingCommand}" ToolTip="Discard changes">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Margin="5" Padding="2" Content="Edit" Command="{Binding ToggleGlobalConfigEditModeCommand}" ToolTip="To begin editing above values.">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="False">
                                            <Setter Property="Visibility" Value="Visible"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsInGlobalEditMode}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Rule Tester" IsSelected="{Binding IsRuleEditorTabSelected, Mode=OneWayToSource}">
                <StackPanel Orientation="Vertical">
                    <Label Grid.Row="0">On this tab you can test out the rules of EvlWatcher, to find out if it would work for a given event-log entry</Label>
                    <Border Margin="5" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="3">
                        <StackPanel Orientation="Vertical">
                            <Label VerticalAlignment="Center">1) Select task:</Label>
                            <ComboBox HorizontalAlignment="Left" Margin="20,5,5,5" Width="200"  ItemsSource="{Binding AvailableTaskNames}" SelectedItem="{Binding SelectedTaskName}"></ComboBox>
                            <StackPanel Orientation="Horizontal">
                                <Label VerticalAlignment="Center">Regex:</Label>
                                <Label Content="{Binding CurrentTaskRegex}"></Label>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label VerticalAlignment="Center">Event Path:</Label>
                                <Label Content="{Binding CurrentTaskEventPath}"></Label>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label VerticalAlignment="Center">Booster Words:</Label>
                                <Label Content="{Binding CurrentTaskBoosters}"></Label>
                            </StackPanel>
                        </StackPanel>
                    </Border >
                    <Border Margin="5" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="3" Height="140">
                        <StackPanel Orientation="Vertical">
                            <Label>2) Insert XML from event-log</Label>
                            <TextBox TextWrapping="Wrap" AcceptsReturn="True" AcceptsTab="True" Text="{Binding XMLText}" Height="100" VerticalScrollBarVisibility="Visible"/>
                        </StackPanel>
                    </Border>
                    <Border Margin="5" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="3" Height="90">
                        <StackPanel Orientation="Vertical">
                        <Label>3) Hit the test button. If it doesn't work, fiddle with the Regex and hit the test button again.. You can also try regex101.com, it's great for testing regexes.</Label>
                            <StackPanel Orientation="Horizontal">
                                <Label>Test with Regex:</Label>
                                <TextBox VerticalAlignment="Center" MinWidth="100" Text="{Binding CurrentTestRegex}"></TextBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Button Margin="5" Command="{Binding TestRegexCommand}">Test</Button>
                                <Button Margin="5" Command="{Binding ResetRegexCommand}">Reset</Button>
                            </StackPanel>
                        </StackPanel>
                    </Border>
                    <Border Margin="5" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="3" Height="90">
                        <StackPanel Orientation="Vertical">
                            <Label> 4) React</Label>
                            <TextBlock Margin="5" TextWrapping="Wrap">You found something that should be blocked but isn't? (RDP or any other protocol?). Feel free to repair or create new tasks in your config.xml file. But hey.. please don't just correct it in your config file.. instead, please make a github issue (and paste above XML and Regex), so other users can benefit of that.</TextBlock>

                        </StackPanel>
                    </Border>
                </StackPanel>
            </TabItem>
            
        </TabControl>
        <StatusBar Grid.Row="1" Grid.ColumnSpan="2">
            <StatusBarItem>
                <Label>
                    <Label.Style>
                        <Style TargetType="Label">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsServiceResponding}" Value="True">
                                    <Setter Property="Content" Value="Service is currently responding." />
                                    <Setter Property="Foreground" Value="Green" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsServiceResponding}" Value="False">
                                    <Setter Property="Content" Value="Service is currently not responding." />
                                    <Setter Property="Foreground" Value="Red" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Label.Style>
                </Label>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
